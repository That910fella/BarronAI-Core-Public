from __future__ import annotations
from dotenv import load_dotenv
load_dotenv()
from fastapi import FastAPI, Body
from fastapi.responses import HTMLResponse
import json, os, pathlib, time
from typing import Any, Dict, List

app = FastAPI()

# --- Dynamic broker routes mount ---
try:
    mount_dynamic_routes(app, ALPACA_CLIENT)
except Exception as e:
    import logging; logging.getLogger(__name__).warning(f"failed to mount dynamic broker routes from dashboard.py: {e}")
# -----------------------------------

# ---- optional DB (best-effort) ----
try:
    from ..storage.db import session, create_all  # type: ignore
    from ..storage.models import SignalRow, PlanRow  # type: ignore
    HAVE_DB = True
except Exception:
    HAVE_DB = False

# ---- optional metrics snapshot ----
try:
    from .metrics import snapshot as metrics_snapshot  # type: ignore
except Exception:
    def metrics_snapshot():
        return {"ts": time.time(), "polygon_calls":0, "polygon_429":0, "cache_hits":0, "freshness":0.0}

# ---- optional notifier ----
try:
    from .notify import post as notify  # type: ignore
except Exception:
    def notify(*args, **kwargs): pass

# ---- helpers ----
def _read_jsonl(path: str, limit: int = 200) -> List[Dict[str, Any]]:
    out=[]
    if not os.path.exists(path): return out
    with open(path,"r",encoding="utf-8") as f:
        for line in f:
            try: out.append(json.loads(line))
            except: pass
    return out[-limit:]

def _append_jsonl(path: str, obj: dict) -> None:
    pathlib.Path(path).parent.mkdir(parents=True, exist_ok=True)
    with open(path, "a", encoding="utf-8") as f:
        f.write(json.dumps(obj) + "\n")

def _load_json(path: str, default):
    try:
        with open(path, "r", encoding="utf-8") as f:
            return json.load(f)
    except Exception:
        return default

def _save_json(path: str, obj) -> None:
    pathlib.Path(path).parent.mkdir(parents=True, exist_ok=True)
    with open(path, "w", encoding="utf-8") as f:
        json.dump(obj, f, indent=2)

# ---- health ----
@app.get("/health")
def health(): return {"ok": True, "ts": time.time()}

# ---- params / drift ----
@app.get("/api/params")
def api_params():
    try:
        from .params import get_params  # type: ignore
        return get_params()
    except Exception:
        return {"note":"no params loader"}

@app.get("/api/drift")
def api_drift():
    path = "tmp/drift.json"
    if not os.path.exists(path): return {"delta_win_pct": 0, "note": "no drift yet"}
    try: return json.loads(open(path,"r",encoding="utf-8").read())
    except Exception: return {"delta_win_pct": 0, "note": "bad drift file"}

# ---- signals / plans / stats ----
@app.get("/api/signals")
def api_signals():
    if HAVE_DB:
        try:
            q = session.query(SignalRow).order_by(SignalRow.ts.desc()).limit(50).all()
            return [json.loads(r.payload) for r in reversed(q)]
        except Exception:
            pass
    return _read_jsonl("tmp/journal/signals.jsonl", limit=50)

@app.get("/api/plans")
def api_plans():
    if HAVE_DB:
        try:
            q = session.query(PlanRow).order_by(PlanRow.ts.desc()).limit(50).all()
            return [json.loads(r.payload) for r in reversed(q)]
        except Exception:
            pass
    return _read_jsonl("tmp/journal/plans.jsonl", limit=50)

@app.get("/api/stats")
def api_stats():
    try: return metrics_snapshot()
    except Exception: return {"note":"no metrics"}

@app.get("/api/db/summary")
def api_db_summary():
    try:
        return {"have_db": HAVE_DB, "signals": len(api_signals()), "plans": len(api_plans())}
    except Exception:
        return {"have_db": False}

# ---- orders (paper dev) ----
@app.get("/api/orders")
def api_orders(): return _read_jsonl("tmp/journal/orders.jsonl", limit=200)

@app.post("/api/orders/append")
def api_orders_append(payload: dict = Body(...)):
    allow = os.getenv('ALLOW_DEV_POSTS','0') in {'1','true','True'}
    if not allow:
        return {'ok': False, 'error': 'dev posts disabled (set ALLOW_DEV_POSTS=1)'}
    pathlib.Path('tmp/journal').mkdir(parents=True, exist_ok=True)
    rec = {'ts': time.time(), 'status': payload.get('status','dry-run'), 'payload': payload}
    _append_jsonl('tmp/journal/orders.jsonl', rec)

    # simulate fills + update positions
    try:
        _append_jsonl('tmp/journal/fills.jsonl', {'ts': rec['ts'], 'state': 'working', 'payload': payload})
        _append_jsonl('tmp/journal/fills.jsonl', {'ts': rec['ts']+0.2, 'state': 'filled', 'payload': payload})
        _update_positions_from_fill({'ts': rec['ts']+0.2, 'status': 'filled', 'payload': payload})
    except Exception:
        pass

    try:
        notify(f"order: {payload.get('side','?')} {payload.get('ticker','?')} x{payload.get('qty','?')} @ {payload.get('limit','?')}", payload)
    except Exception:
        pass
    return {'ok': True}

# ---- fills / positions / risk ----
@app.get("/api/fills")
def api_fills(): return _read_jsonl("tmp/journal/fills.jsonl", limit=200)

def _update_positions_from_fill(ev: dict):
    pth = "tmp/journal/positions.json"
    pos = _load_json(pth, {})
    pay = (ev or {}).get("payload", {})
    sym = str(pay.get("ticker","")).upper()
    side = str(pay.get("side","")).lower()
    qty  = int(pay.get("qty",0))
    px   = float(pay.get("limit",0.0))
    if not sym or qty<=0 or px<=0: 
        return
    rec = pos.get(sym, {"qty":0, "avg_price":0.0})
    q0, p0 = int(rec["qty"]), float(rec["avg_price"])
    if side == "buy":
        new_qty = q0 + qty
        new_avg = ((q0*p0) + (qty*px)) / new_qty if new_qty else 0.0
        rec = {"qty": new_qty, "avg_price": round(new_avg,4)}
    elif side == "sell":
        new_qty = q0 - qty
        rec = {"qty": max(new_qty,0), "avg_price": (0.0 if new_qty<=0 else p0)}
    pos[sym] = rec
    if pos[sym]["qty"] == 0:
        del pos[sym]
    _save_json(pth, pos)

@app.get("/api/positions")
def api_positions():
    return _load_json("tmp/journal/positions.json", {})

@app.get("/api/risk")
def api_risk():
    cfg = {
        "max_exposure": float(os.getenv("MAX_EXPOSURE_USD","50000") or 0),
        "per_name_cap": float(os.getenv("PER_NAME_CAP_USD","15000") or 0),
        "risk_atr_mult": float(os.getenv("RISK_ATR_MULT","1.0") or 1.0),
    }
    pos = _load_json("tmp/journal/positions.json", {})
    rows, total = [], 0.0
    for sym, rec in pos.items():
        qty = int(rec.get("qty",0)); avg=float(rec.get("avg_price",0.0))
        last = avg  # no market data yet; keeps UI consistent
        expo = qty*last; pnl = qty*(last-avg)
        total += expo
        atr_hint = max(0.01*last, 0.01)
        rows.append({
            "symbol": sym, "qty": qty, "avg_price": round(avg,4), "last": round(last,4),
            "exposure": round(expo,2), "unreal_pnl": round(pnl,2),
            "dollar_risk_per_share": round(cfg["risk_atr_mult"]*atr_hint,4),
        })
    summary = {
        "total_exposure": round(total,2),
        "max_exposure": cfg["max_exposure"],
        "per_name_cap": cfg["per_name_cap"],
        "risk_atr_mult": cfg["risk_atr_mult"],
        "breach": {
            "exposure": bool(cfg["max_exposure"] and total > cfg["max_exposure"]),
            "per_name": [r["symbol"] for r in rows if cfg["per_name_cap"] and r["exposure"] > cfg["per_name_cap"]],
        },
    }
    return {"positions": rows, "summary": summary}

# ---- UI ----
@app.get("/", response_class=HTMLResponse)
def home():
    html = """
<!doctype html>
<meta charset="utf-8">
<title>Barron.AI Dashboard</title>
<style>
body{font-family:system-ui,"Segoe UI",Arial;margin:20px;background:#fafafa}
h1{margin:0 0 10px}
.grid{display:grid;grid-template-columns:1fr 1fr;gap:18px}
.card{background:#fff;border-radius:12px;box-shadow:0 2px 8px rgba(0,0,0,.06);padding:14px}
.pill{display:inline-block;padding:6px 10px;border-radius:999px;background:#2ecc71;color:#fff;margin-right:8px;font-size:12px}
pre{background:#0b1220;color:#b8f4bd;padding:10px;border-radius:10px;max-height:260px;overflow:auto}
table{width:100%;border-collapse:collapse;font-size:13px}
th,td{padding:6px 8px;border-bottom:1px solid #eee;text-align:left;white-space:nowrap}
th{font-weight:600;color:#444}
.empty{color:#888;font-style:italic}
.warn{background:#f39c12;color:#fff}
.danger{background:#c0392b;color:#fff}
</style>

<h1>Barron.AI Dashboard</h1>
<span class="pill" id="drift-pill">drift: …</span>
<span class="pill" id="params-pill">params…</span>

<div class="grid" style="margin-top:14px">
  <div class="card">
    <h3>Signals (latest)</h3>
    <pre id="signals">loading…</pre>
  </div>
  <div class="card">
    <h3>Plans (latest)</h3>
    <pre id="plans">loading…</pre>
  </div>
  <div class="card">
    <h3>Recent Orders</h3>
    <table>
      <thead><tr><th>When (ET)</th><th>Status</th><th>Ticker</th><th>Side</th><th>Qty</th><th>Limit</th></tr></thead>
      <tbody id="orders-body"><tr><td class="empty" colspan="6">No orders yet</td></tr></tbody>
    </table>
  </div>
  <div class="card">
    <h3>Stats</h3>
    <pre id="stats">loading…</pre>
  </div>
  <div class="card">
    <h3>Fills (stream)</h3>
    <table>
      <thead><tr><th>When (ET)</th><th>State</th><th>Ticker</th><th>Side</th><th>Qty</th><th>Px</th></tr></thead>
      <tbody id="fills-body"><tr><td class="empty" colspan="6">No fills yet</td></tr></tbody>
    </table>
  </div>
  <div class="card">
    <h3>Positions</h3>
    <table>
      <thead><tr><th>Symbol</th><th>Qty</th><th>Avg</th><th>Last</th><th>Exposure</th><th>Unrl PnL</th></tr></thead>
      <tbody id="pos-body"><tr><td class="empty" colspan="6">No positions</td></tr></tbody>
    </table>
  </div>
  <div class="card">
    <h3>Risk</h3>
    <pre id="risk">loading…</pre>
  </div>
</div>

<script>
function fmtTime(ts){ try{ const d=new Date(ts*1000); return d.toLocaleString('en-US',{timeZone:'America/New_York'});}catch(e){return '-'} }
async function J(u){ const r=await fetch(u); return r.json(); }

async function loadSignals(){ const j=await J('/api/signals'); document.getElementById('signals').textContent = JSON.stringify(j.slice(-1)[0]||{}, null, 2); }
async function loadPlans(){ const j=await J('/api/plans'); document.getElementById('plans').textContent = JSON.stringify(j.slice(-1)[0]||{}, null, 2); }
async function loadStats(){ const j=await J('/api/stats'); document.getElementById('stats').textContent = JSON.stringify(j, null, 2); }
async function loadDrift(){ const d=await J('/api/drift'); const v=d.delta_win_pct||0; const pill=document.getElementById('drift-pill'); pill.textContent='drift: '+v+'%'; pill.className='pill '+(v<-5?'danger':(v<0?'warn':'')); }
async function loadParams(){ const p=await J('/api/params'); document.getElementById('params-pill').textContent='th='+(p.threshold ?? '?')+' w=['+(p?.weights?.structure ?? '?')+','+(p?.weights?.catalyst ?? '?')+','+(p?.weights?.narrative ?? '?')+']'; }

async function loadOrders(){
  const j=await J('/api/orders'); const tb=document.getElementById('orders-body'); tb.innerHTML='';
  if(!j.length){ tb.innerHTML='<tr><td class="empty" colspan="6">No orders yet</td></tr>'; return; }
  for(const r of j.slice(-20)){
    const p=r.payload||{};
    const tr=document.createElement('tr');
    tr.innerHTML='<td>'+fmtTime(r.ts)+'</td><td>'+(r.status||'')+'</td><td>'+(p.ticker||'')+'</td><td>'+(p.side||'')+'</td><td>'+(p.qty||'')+'</td><td>'+(p.limit||'')+'</td>';
    tb.appendChild(tr);
  }
}

async function loadFills(){
  const j=await J('/api/fills'); const tb=document.getElementById('fills-body'); tb.innerHTML='';
  if(!j.length){ tb.innerHTML='<tr><td class="empty" colspan="6">No fills yet</td></tr>'; return; }
  for(const r of j.slice(-30)){
    const p=r.payload||{};
    const tr=document.createElement('tr');
    tr.innerHTML='<td>'+fmtTime(r.ts)+'</td><td>'+(r.state||'')+'</td><td>'+(p.ticker||'')+'</td><td>'+(p.side||'')+'</td><td>'+(p.qty||'')+'</td><td>'+(p.limit||'')+'</td>';
    tb.appendChild(tr);
  }
}

async function loadPositions(){
  const j=await J('/api/positions'); const tb=document.getElementById('pos-body'); tb.innerHTML='';
  const syms=Object.keys(j);
  if(!syms.length){ tb.innerHTML='<tr><td class="empty" colspan="6">No positions</td></tr>'; return; }
  for(const k of syms){
    const r=j[k];
    const tr=document.createElement('tr');
    const last=(r.last && r.last.toFixed)? r.last.toFixed(2) : (r.last ?? '-');
    tr.innerHTML='<td>'+k+'</td><td>'+r.qty+'</td><td>'+Number(r.avg_price).toFixed(2)+'</td><td>'+last+'</td><td>'+(r.exposure??"-")+'</td><td>'+(r.unreal_pnl??"-")+'</td>';
    tb.appendChild(tr);
  }
}

async function loadRisk(){
  const j=await J('/api/risk'); document.getElementById('risk').textContent = JSON.stringify(j, null, 2);
}

setInterval(loadSignals, 5000);
setInterval(loadPlans, 5000);
setInterval(loadStats, 10000);
setInterval(loadDrift, 10000);
setInterval(loadParams, 15000);
setInterval(loadOrders, 4000);
setInterval(loadFills, 4000);
setInterval(loadPositions, 6000);
setInterval(loadRisk, 12000);

loadSignals(); loadPlans(); loadStats(); loadDrift(); loadParams(); loadOrders(); loadFills(); loadPositions(); loadRisk();
</script>
"""
    return HTMLResponse(content=html)

# -------- Alpaca broker integration --------
import os
from typing import Any, Dict, Optional
from fastapi import Body

try:
    from .broker_alpaca import Alpaca  # type: ignore
except Exception:
    Alpaca = None  # type: ignore

ALPACA_CLIENT: Optional["Alpaca"] = None
AK = os.getenv("ALPACA_KEY_ID")
AS = os.getenv("ALPACA_SECRET_KEY")
AU = os.getenv("ALPACA_BASE_URL", "https://paper-api.alpaca.markets/v2")
if Alpaca and AK and AS:
    ALPACA_CLIENT = Alpaca(AU, AK, AS)

@app.get("/api/broker/health")
def api_broker_health():
    if not ALPACA_CLIENT:
        return {"ok": False, "error": "alpaca not configured"}
    return ALPACA_CLIENT.health()

@app.post("/api/broker/orders")
def api_broker_orders(payload: Dict[str, Any] = Body(...)):
    if not ALPACA_CLIENT:
        return {"ok": False, "error": "alpaca not configured"}
    sym   = str(payload.get("ticker", "")).upper()
    side  = str(payload.get("side", "")).lower()
    qty   = int(payload.get("qty", 0))
    limit = payload.get("limit", None)
    if not sym or side not in ("buy", "sell") or qty <= 0:
        return {"ok": False, "error": "invalid params"}
    return ALPACA_CLIENT.submit_order(sym, side, qty, limit)

@app.get("/api/broker/positions")
def api_broker_positions():
    if not ALPACA_CLIENT:
        return {"ok": False, "error": "alpaca not configured"}
    return ALPACA_CLIENT.positions()
# END ALPACA BLOCK
# -------- Alpaca broker extras --------
from typing import Any, Dict, Optional
import os
from fastapi import Body, Path

try:
    from .broker_alpaca import Alpaca  # type: ignore
except Exception:
    Alpaca = None  # type: ignore

ALPACA_CLIENT: Optional["Alpaca"] = None
AK = os.getenv("ALPACA_KEY_ID")
AS = os.getenv("ALPACA_SECRET_KEY")
AU = os.getenv("ALPACA_BASE_URL", "https://paper-api.alpaca.markets/v2")
if Alpaca and AK and AS:
    ALPACA_CLIENT = Alpaca(AU, AK, AS)

@app.get("/api/broker/debug")
def api_broker_debug():
    kid = os.getenv("ALPACA_KEY_ID", "")
    return {
        "base_url": os.getenv("ALPACA_BASE_URL"),
        "key_loaded": bool(kid),
        "key_preview": f"{kid[:4]}...{kid[-4:]}" if kid else None,
    }

@app.get("/api/broker/health")
def api_broker_health():
    if not ALPACA_CLIENT:
        return {"ok": False, "error": "alpaca not configured"}
    return ALPACA_CLIENT.health()

@app.post("/api/broker/orders")
def api_broker_orders(payload: Dict[str, Any] = Body(...)):
    if not ALPACA_CLIENT:
        return {"ok": False, "error": "alpaca not configured"}
    sym   = str(payload.get("ticker", "")).upper()
    side  = str(payload.get("side", "")).lower()
    qty   = int(payload.get("qty", 0))
    limit = payload.get("limit", None)
    ext   = bool(payload.get("extended_hours", False))
    if not sym or side not in ("buy", "sell") or qty <= 0:
        return {"ok": False, "error": "invalid params"}
    return ALPACA_CLIENT.submit_order(sym, side, qty, limit, extended_hours=ext)

@app.get("/api/broker/orders")
def api_broker_list_orders(status: str = "all", limit: int = 50):
    if not ALPACA_CLIENT:
        return {"ok": False, "error": "alpaca not configured"}
    return ALPACA_CLIENT.list_orders(status=status, limit=limit)

@app.get("/api/broker/orders/{order_id}")
def api_broker_get_order(order_id: str = Path(...)):
    if not ALPACA_CLIENT:
        return {"ok": False, "error": "alpaca not configured"}
    return ALPACA_CLIENT.get_order(order_id)

@app.delete("/api/broker/orders/{order_id}")
def api_broker_cancel_order(order_id: str = Path(...)):
    if not ALPACA_CLIENT:
        return {"ok": False, "error": "alpaca not configured"}
    return ALPACA_CLIENT.cancel_order(order_id)

@app.get("/api/broker/positions")
def api_broker_positions():
    if not ALPACA_CLIENT:
        return {"ok": False, "error": "alpaca not configured"}
    return ALPACA_CLIENT.positions()
# -------- Alpaca broker: close/flatten helpers --------
from typing import Any, Dict, Optional
import os
from fastapi import Body, Path, Query

try:
    from .broker_alpaca import Alpaca  # type: ignore
except Exception:
    Alpaca = None  # type: ignore

# Reuse a single global client if creds exist
ALPACA_CLIENT: Optional["Alpaca"] = None
AK = os.getenv("ALPACA_KEY_ID")
AS = os.getenv("ALPACA_SECRET_KEY")
AU = os.getenv("ALPACA_BASE_URL", "https://paper-api.alpaca.markets/v2")
if Alpaca and AK and AS:
    ALPACA_CLIENT = Alpaca(AU, AK, AS)

@app.post("/api/broker/close/{symbol}")
def api_broker_close_position(symbol: str = Path(..., min_length=1)):
    if not ALPACA_CLIENT:
        return {"ok": False, "error": "alpaca not configured"}
    return ALPACA_CLIENT.close_position(symbol)

@app.post("/api/broker/flatten")
def api_broker_flatten():
    if not ALPACA_CLIENT:
        return {"ok": False, "error": "alpaca not configured"}
    cancel = ALPACA_CLIENT.cancel_all_orders()
    close  = ALPACA_CLIENT.close_all_positions()
    return {"ok": cancel.get("ok") and close.get("ok"), "cancel": cancel, "close": close}

# Optional tidy list/cancel if not present
@app.get("/api/broker/orders")
def api_broker_list_orders(status: str = Query("all"), limit: int = Query(50, ge=1, le=500)):
    if not ALPACA_CLIENT:
        return {"ok": False, "error": "alpaca not configured"}
    return ALPACA_CLIENT.list_orders(status=status, limit=limit)

@app.delete("/api/broker/orders/{order_id}")
def api_broker_cancel(order_id: str = Path(..., min_length=8)):
    if not ALPACA_CLIENT:
        return {"ok": False, "error": "alpaca not configured"}
    return ALPACA_CLIENT.cancel_order(order_id)

# --- include broker routes (oh-crap panel + APIs)
try:
    from .routes_broker import router as _broker_router  # type: ignore
    app.include_router(_broker_router)
except Exception as _e:
    print("Broker router not loaded:", _e)
from fastapi.responses import HTMLResponse

@app.get("/ui/broker", response_class=HTMLResponse)
def ui_broker():
    return """
<!doctype html>
<html>
<head>
  <meta charset="utf-8" />
  <title>Broker Controls</title>
  <style>
    body { font-family: system-ui, -apple-system, Segoe UI, Roboto, sans-serif; padding: 20px; max-width: 820px; margin: 0 auto; }
    h1 { margin-top: 0; }
    .row { display: flex; gap: 8px; margin: 8px 0; align-items: center; }
    input, button { padding: 8px 10px; font-size: 14px; }
    pre { background: #111; color: #eee; padding: 12px; border-radius: 8px; overflow: auto; max-height: 360px; }
    .card { border: 1px solid #ddd; border-radius: 10px; padding: 12px; margin: 16px 0; }
  </style>
</head>
<body>
  <h1>Broker Controls</h1>

  <div class="card">
    <h3>Health</h3>
    <div class="row">
      <button onclick="hit('/api/broker/health')">Check Health</button>
    </div>
  </div>

  <div class="card">
    <h3>Close Position (Market)</h3>
    <div class="row">
      <input id="sym" placeholder="Ticker e.g. TSLA" />
      <button onclick="closeOne()">Close</button>
    </div>
  </div>

  <div class="card">
    <h3>Flatten (Cancel All + Close All)</h3>
    <div class="row">
      <button onclick="flattenAll()">FLATTEN</button>
    </div>
  </div>

  <pre id="out"></pre>

  <script>
    const out = document.getElementById('out');
    function show(x){ out.textContent = JSON.stringify(x, null, 2); }
    async function hit(url, opts){ const r = await fetch(url, opts); const j = await r.json(); show(j); }

    async function closeOne(){
      const sym = document.getElementById('sym').value.trim().toUpperCase();
      if(!sym) return alert('Enter a ticker');
      await hit('/api/broker/close/' + encodeURIComponent(sym), {method:'POST'});
    }
    async function flattenAll(){
      if(!confirm('Are you sure? This will cancel ALL open orders and close ALL open positions.')) return;
      await hit('/api/broker/flatten', {method:'POST'});
    }
  </script>
</body>
</html>
"""
from fastapi.responses import HTMLResponse

@app.get("/ui/broker", response_class=HTMLResponse)
def ui_broker():
    return """
<!doctype html>
<html>
<head>
  <meta charset="utf-8" />
  <title>Broker Controls</title>
  <style>
    body { font-family: system-ui, -apple-system, Segoe UI, Roboto, sans-serif; padding: 20px; max-width: 820px; margin: 0 auto; }
    h1 { margin-top: 0; }
    .row { display: flex; gap: 8px; margin: 8px 0; align-items: center; }
    input, button { padding: 8px 10px; font-size: 14px; }
    pre { background: #111; color: #eee; padding: 12px; border-radius: 8px; overflow: auto; max-height: 360px; }
    .card { border: 1px solid #ddd; border-radius: 10px; padding: 12px; margin: 16px 0; }
  </style>
</head>
<body>
  <h1>Broker Controls</h1>

  <div class="card">
    <h3>Health</h3>
    <div class="row">
      <button onclick="hit('/api/broker/health')">Check Health</button>
    </div>
  </div>

  <div class="card">
    <h3>Close Position (Market)</h3>
    <div class="row">
      <input id="sym" placeholder="Ticker e.g. TSLA" />
      <button onclick="closeOne()">Close</button>
    </div>
  </div>

  <div class="card">
    <h3>Flatten (Cancel All + Close All)</h3>
    <div class="row">
      <button onclick="flattenAll()">FLATTEN</button>
    </div>
  </div>

  <pre id="out"></pre>

  <script>
    const out = document.getElementById('out');
    function show(x){ out.textContent = JSON.stringify(x, null, 2); }
    async function hit(url, opts){ const r = await fetch(url, opts); const j = await r.json(); show(j); }

    async function closeOne(){
      const sym = document.getElementById('sym').value.trim().toUpperCase();
      if(!sym) return alert('Enter a ticker');
      await hit('/api/broker/close/' + encodeURIComponent(sym), {method:'POST'});
    }
    async function flattenAll(){
      if(!confirm('Are you sure? This will cancel ALL open orders and close ALL open positions.')) return;
      await hit('/api/broker/flatten', {method:'POST'});
    }
  </script>
</body>
</html>
"""
# ---- dynamic order routes (mount from known-good module)
try:
    from .broker_dyn import mount_dynamic_routes  # type: ignore
    # assume the file defines `router` already in dashboard.py (it does)
    from . import broker_dyn as _bd   # only to ensure module loaded
except Exception as _e:
    print("WARN: failed to mount dynamic broker routes from dashboard.py:", _e)


# ---- dynamic order routes (mounted from dashboard.py)
try:
    from .routes_broker import ALPACA_CLIENT   # reuse the existing client created there
    from .broker_dyn import mount_dynamic_routes
    mount_dynamic_routes(app, ALPACA_CLIENT)   # mount onto FastAPI app
except Exception as _e:
    print("WARN: failed to mount dynamic broker routes from dashboard.py:", _e)
